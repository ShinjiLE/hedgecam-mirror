package com.caddish_hedgehog.hedgecam2;

/**
	Based on Bruce Lindbloom's algorithms.
	http://www.brucelindbloom.com
**/
public class ColorTemperature {
	private final static String TAG = "";
	private static double gamma = 1.0;

	// CIE XYZ color gains. 360nm to 830nm in 5nm increments.
	private static final double[] CIE1931_x = {
		0.000129900000, 0.000232100000, 0.000414900000, 0.000741600000, 0.001368000000, 0.002236000000, 0.004243000000, 0.007650000000,
		0.014310000000, 0.023190000000, 0.043510000000, 0.077630000000, 0.134380000000, 0.214770000000, 0.283900000000, 0.328500000000,
		0.348280000000, 0.348060000000, 0.336200000000, 0.318700000000, 0.290800000000, 0.251100000000, 0.195360000000, 0.142100000000,
		0.095640000000, 0.057950010000, 0.032010000000, 0.014700000000, 0.004900000000, 0.002400000000, 0.009300000000, 0.029100000000,
		0.063270000000, 0.109600000000, 0.165500000000, 0.225749900000, 0.290400000000, 0.359700000000, 0.433449900000, 0.512050100000,
		0.594500000000, 0.678400000000, 0.762100000000, 0.842500000000, 0.916300000000, 0.978600000000, 1.026300000000, 1.056700000000,
		1.062200000000, 1.045600000000, 1.002600000000, 0.938400000000, 0.854449900000, 0.751400000000, 0.642400000000, 0.541900000000,
		0.447900000000, 0.360800000000, 0.283500000000, 0.218700000000, 0.164900000000, 0.121200000000, 0.087400000000, 0.063600000000,
		0.046770000000, 0.032900000000, 0.022700000000, 0.015840000000, 0.011359160000, 0.008110916000, 0.005790346000, 0.004109457000,
		0.002899327000, 0.002049190000, 0.001439971000, 0.000999949300, 0.000690078600, 0.000476021300, 0.000332301100, 0.000234826100,
		0.000166150500, 0.000117413000, 0.000083075270, 0.000058706520, 0.000041509940, 0.000029353260, 0.000020673830, 0.000014559770,
		0.000010253980, 0.000007221456, 0.000005085868, 0.000003581652, 0.000002522525, 0.000001776509, 0.000001251141
	};
	private static final double[] CIE1931_y = {
		0.000003917000, 0.000006965000, 0.000012390000, 0.000022020000, 0.000039000000, 0.000064000000, 0.000120000000, 0.000217000000,
		0.000396000000, 0.000640000000, 0.001210000000, 0.002180000000, 0.004000000000, 0.007300000000, 0.011600000000, 0.016840000000,
		0.023000000000, 0.029800000000, 0.038000000000, 0.048000000000, 0.060000000000, 0.073900000000, 0.090980000000, 0.112600000000,
		0.139020000000, 0.169300000000, 0.208020000000, 0.258600000000, 0.323000000000, 0.407300000000, 0.503000000000, 0.608200000000,
		0.710000000000, 0.793200000000, 0.862000000000, 0.914850100000, 0.954000000000, 0.980300000000, 0.994950100000, 1.000000000000,
		0.995000000000, 0.978600000000, 0.952000000000, 0.915400000000, 0.870000000000, 0.816300000000, 0.757000000000, 0.694900000000,
		0.631000000000, 0.566800000000, 0.503000000000, 0.441200000000, 0.381000000000, 0.321000000000, 0.265000000000, 0.217000000000,
		0.175000000000, 0.138200000000, 0.107000000000, 0.081600000000, 0.061000000000, 0.044580000000, 0.032000000000, 0.023200000000,
		0.017000000000, 0.011920000000, 0.008210000000, 0.005723000000, 0.004102000000, 0.002929000000, 0.002091000000, 0.001484000000,
		0.001047000000, 0.000740000000, 0.000520000000, 0.000361100000, 0.000249200000, 0.000171900000, 0.000120000000, 0.000084800000,
		0.000060000000, 0.000042400000, 0.000030000000, 0.000021200000, 0.000014990000, 0.000010600000, 0.000007465700, 0.000005257800,
		0.000003702900, 0.000002607800, 0.000001836600, 0.000001293400, 0.000000910930, 0.000000641530, 0.000000451810
	};
	private static final double[] CIE1931_z = {
		0.000606100000, 0.001086000000, 0.001946000000, 0.003486000000, 0.006450001000, 0.010549990000, 0.020050010000, 0.036210000000,
		0.067850010000, 0.110200000000, 0.207400000000, 0.371300000000, 0.645600000000, 1.039050100000, 1.385600000000, 1.622960000000,
		1.747060000000, 1.782600000000, 1.772110000000, 1.744100000000, 1.669200000000, 1.528100000000, 1.287640000000, 1.041900000000,
		0.812950100000, 0.616200000000, 0.465180000000, 0.353300000000, 0.272000000000, 0.212300000000, 0.158200000000, 0.111700000000,
		0.078249990000, 0.057250010000, 0.042160000000, 0.029840000000, 0.020300000000, 0.013400000000, 0.008749999000, 0.005749999000,
		0.003900000000, 0.002749999000, 0.002100000000, 0.001800000000, 0.001650001000, 0.001400000000, 0.001100000000, 0.001000000000,
		0.000800000000, 0.000600000000, 0.000340000000, 0.000240000000, 0.000190000000, 0.000100000000, 0.000049999990, 0.000030000000,
		0.000020000000, 0.000010000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
		0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
		0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
		0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
		0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000
	};

	private static final double[] wavelength = {	
		3.600e-4, 3.650e-4, 3.700e-4, 3.750e-4, 3.800e-4, 3.850e-4, 3.900e-4, 3.950e-4,
		4.000e-4, 4.050e-4, 4.100e-4, 4.150e-4, 4.200e-4, 4.250e-4, 4.300e-4, 4.350e-4,
		4.400e-4, 4.450e-4, 4.500e-4, 4.550e-4, 4.600e-4, 4.650e-4, 4.700e-4, 4.750e-4,
		4.800e-4, 4.850e-4, 4.900e-4, 4.950e-4, 5.000e-4, 5.050e-4, 5.100e-4, 5.150e-4,
		5.200e-4, 5.250e-4, 5.300e-4, 5.350e-4, 5.400e-4, 5.450e-4, 5.500e-4, 5.550e-4,
		5.600e-4, 5.650e-4, 5.700e-4, 5.750e-4, 5.800e-4, 5.850e-4, 5.900e-4, 5.950e-4,
		6.000e-4, 6.050e-4, 6.100e-4, 6.150e-4, 6.200e-4, 6.250e-4, 6.300e-4, 6.350e-4,
		6.400e-4, 6.450e-4, 6.500e-4, 6.550e-4, 6.600e-4, 6.650e-4, 6.700e-4, 6.750e-4,
		6.800e-4, 6.850e-4, 6.900e-4, 6.950e-4, 7.000e-4, 7.050e-4, 7.100e-4, 7.150e-4,
		7.200e-4, 7.250e-4, 7.300e-4, 7.350e-4, 7.400e-4, 7.450e-4, 7.500e-4, 7.550e-4,
		7.600e-4, 7.650e-4, 7.700e-4, 7.750e-4, 7.800e-4, 7.850e-4, 7.900e-4, 7.950e-4,
		8.000e-4, 8.050e-4, 8.100e-4, 8.150e-4, 8.200e-4, 8.250e-4, 8.300e-4
	};

	private static final double[] wavelength_5 = {	
		6.0466175999999990E-15, 6.4783487281249990E-15, 6.9343956999999990E-15, 7.4157714843750000E-15,
		7.9235168000000000E-15, 8.4587004906250000E-15, 9.0224199000000020E-15, 9.6158012468750010E-15,
		1.0240000000000002E-14, 1.0896201253125003E-14, 1.1585620100000004E-14, 1.2309502009375006E-14,
		1.3069123199999997E-14, 1.3865791015624999E-14, 1.4700844300000000E-14, 1.5575653771875000E-14,
		1.6491622400000000E-14, 1.7450185778125003E-14, 1.8452812500000000E-14, 1.9501004534375003E-14,
		2.0596297600000003E-14, 2.1740261540625006E-14, 2.2934500700000007E-14, 2.4180654296875010E-14,
		2.5480396799999994E-14, 2.6835438303124997E-14, 2.8247524899999997E-14, 2.9718439059374994E-14,
		3.1250000000000000E-14, 3.2844064065625007E-14, 3.4502525100000000E-14, 3.6227314821875004E-14,
		3.8020403200000000E-14, 3.9883798828125010E-14, 4.1819549300000010E-14, 4.3829741584375010E-14,
		4.5916502400000020E-14, 4.8081998590625015E-14, 5.0328437500000020E-14, 5.2658067346875020E-14,
		5.5073177600000020E-14, 5.7576099353125020E-14, 6.0169205700000040E-14, 6.2854912109375040E-14,
		6.5635676799999970E-14, 6.8514001115624970E-14, 7.1492429899999990E-14, 7.4573551871874970E-14,
		7.7759999999999980E-14, 8.1054451878124990E-14, 8.4459630099999990E-14, 8.7978302634374990E-14,
		9.1613283199999990E-14, 9.5367431640625000E-14, 9.9243654299999990E-14, 1.0324490439687500E-13,
		1.0737418240000002E-13, 1.1163453640312500E-13, 1.1602906250000003E-13, 1.2056090515937502E-13,
		1.2523325760000003E-13, 1.3004936216562503E-13, 1.3501251070000004E-13, 1.4012604492187506E-13,
		1.4539335680000003E-13, 1.5081788892812506E-13, 1.5640313490000007E-13, 1.6215263968437506E-13,
		1.6807000000000009E-13, 1.7415886469062494E-13, 1.8042293509999996E-13, 1.8686596544687494E-13,
		1.9349176319999998E-13, 2.0030418945312497E-13, 2.0730715929999998E-13, 2.1450464220937497E-13,
		2.2190066239999998E-13, 2.2949929921562496E-13, 2.3730468750000000E-13, 2.4532101797187500E-13,
		2.5355253760000000E-13, 2.6200354997812500E-13, 2.7067841570000000E-13, 2.7958155273437500E-13,
		2.8871743680000006E-13, 2.9809060174062510E-13, 3.0770563990000004E-13, 3.1756720249687510E-13,
		3.2768000000000007E-13, 3.3804880250312510E-13, 3.4867844010000010E-13, 3.5957380325937507E-13,
		3.7073984320000010E-13, 3.8218157226562513E-13, 3.9390406430000020E-13
	};

	// reciprocal temperature (K)
	private static final double[] rt = {
		  0.0e-6,  10.0e-6,  20.0e-6,  30.0e-6,  40.0e-6,  50.0e-6,
		 60.0e-6,  70.0e-6,  80.0e-6,  90.0e-6, 100.0e-6, 125.0e-6,
		150.0e-6, 175.0e-6, 200.0e-6, 225.0e-6, 250.0e-6, 275.0e-6,
		300.0e-6, 325.0e-6, 350.0e-6, 375.0e-6, 400.0e-6, 425.0e-6,
		450.0e-6, 475.0e-6, 500.0e-6, 525.0e-6, 550.0e-6, 575.0e-6,
		600.0e-6
	};

	private static final double[] u = {
		0.18006, 0.18066, 0.18133, 0.18208, 0.18293, 0.18388, 
		0.18494, 0.18611, 0.18740, 0.18880, 0.19032, 0.19462, 
		0.19962, 0.20525, 0.21142, 0.21807, 0.22511, 0.23247, 
		0.24010, 0.24792, 0.25591, 0.26400, 0.27218, 0.28039, /* 0.24792 is correct, W&S shows as 0.24702 which is a typo */
		0.28863, 0.29685, 0.30505, 0.31320, 0.32129, 0.32931, 
		0.33724
	};

	private static final double[] v = {
		0.26352, 0.26589, 0.26846, 0.27119, 0.27407, 0.27709, 
		0.28021, 0.28342, 0.28668, 0.28997, 0.29326, 0.30141, 
		0.30921, 0.31647, 0.32312, 0.32909, 0.33439, 0.33904, 
		0.34308, 0.34655, 0.34951, 0.35200, 0.35407, 0.35577, 
		0.35714, 0.35823, 0.35907, 0.35968, 0.36011, 0.36038, 
		0.36051
	};

	private static final double[] t = {
		-0.24341, -0.25479, -0.26876, -0.28539, -0.30470, -0.32675,
		-0.35156, -0.37915, -0.40955, -0.44278, -0.47888, -0.58204,
		-0.70471, -0.84901, -1.0182,  -1.2168,  -1.4512,  -1.7298,
		-2.0637,  -2.4681,  -2.9641,  -3.5814,  -4.3633,  -5.3762,
		-6.7262,  -8.5955, -11.324,  -15.628,  -23.325,  -40.770,
		-116.45
	};

	// CIE XYZ -> sRGB conversion matrix.
	public static final double[][] XYZ_RGB = {
		{3.2404542, -1.5371385, -0.4985314},
		{-0.9692660, 1.8760108, 0.0415560},
		{0.0556434, -0.2040259, 1.0572252}
	};

	//  sRGB -> CIE XYZ conversion matrix.
	public static final double[][] RGB_XYZ = {
		{0.4124564, 0.3575761, 0.1804375},
		{0.2126729, 0.7151522, 0.0721750},
		{0.0193339, 0.1191920, 0.9503041}
	};
	
	private static double[][] adapt_bradford = {
		{0.8951, -0.7502, 0.0389},
		{0.2664, 1.7135, -0.0685},
		{-0.1614, 0.0367, 1.0296}
	};

	public static class CIECoordinates {
		public double x;
		public double y;
		public double Y;

		public CIECoordinates (double x, double y, double Y) {
			this.x = x;
			this.y = y;
			this.Y = Y;
		}
		
		public CIEColor toXYZ () {
			if (this.y < 0.000001) {
				return new CIEColor();
			}
			else {
				return new CIEColor((this.x * this.Y) / this.y, this.Y, ((1.0 - this.x - this.y) * this.Y) / this.y);
			}
		}

		public String toString() {
			return "x = " + this.x + ", y = " + this.y + ", Y = " + this.Y;
		}
	}

	public static class CIEColor {
		public double x;
		public double y;
		public double z;
		
		public CIEColor () {
			this.x = 0;
			this.y = 0;
			this.z = 0;
		}

		public CIEColor (double x, double y, double z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public CIEColor (int temperature) {
			double temp = (double)temperature;
			double c1 = 2.0 * Math.PI * 6.626176 * 2.99792458 * 2.99792458;	// * 1.0e-18
			double c2 = (6.626176 * 2.99792458) / 1.380662;	// * 1.0e-3
/*
			int i = 0;
			
			for (double nm = 360; nm <= 830; nm += 5)
			{
				double wavelength_m = nm * 1.0e-3;
				double wavelength_m_5 = Math.pow(wavelength_m, 5);
				double blackbody = C1 / (wavelength_m_5 * 1.0e-12 * (Math.exp(C2 / (temp * wavelength_m * 1.0e-3)) - 1.0));*/

			for (int i = 0; i < wavelength.length; i++) {
				double blackbody = c1 / (wavelength_5[i] * (Math.exp(c2 / (temp * wavelength[i])) - 1.0));
				this.x += (blackbody * CIE1931_x[i]);
				this.y += (blackbody * CIE1931_y[i]);
				this.z += (blackbody * CIE1931_z[i]);
//				i++;
			}
			this.x /= this.y;
			this.z /= this.y;
			this.y = 1.0;
		}

		public RGBColor toRGB() {
			return toRGB(XYZ_RGB);
		}

		public RGBColor toRGB(double[][] matrix) {
			return new RGBColor(
				compand(this.x*matrix[0][0] + this.y*matrix[0][1] + this.z*matrix[0][2]),
				compand(this.x*matrix[1][0] + this.y*matrix[1][1] + this.z*matrix[1][2]),
				compand(this.x*matrix[2][0] + this.y*matrix[2][1] + this.z*matrix[2][2])
			);
		}

		private double compand(double in) {
			double out;
			double sign = 1.0;
			if (gamma > 0.0) {
				out = Math.pow(Math.abs(in), 1.0 / gamma);
			} else {
				// L
				if (in < 0.0) {
					sign = -1.0;
					in = -in;
				}
				out = (in <= (216.0 / 24389.0)) ? (in * 24389.0 / 2700.0) : (1.16 * Math.pow(in, 1.0 / 3.0) - 0.16);
				out *= sign;
			}
			return out;
		}
		
		public int getTemperature() {
			double us = (4.0 * this.x) / (this.x + 15.0 * this.y + 3.0 * this.z);
			double vs = (6.0 * this.y) / (this.x + 15.0 * this.y + 3.0 * this.z);
			double prevVertDist = 0.0;
			double thisVertDist = 0.0;

			int i = 0;
			for (i = 0; i < 31; i++) {
				thisVertDist = (vs - v[i]) - t[i] * (us - u[i]);
				if (i == 0 && thisVertDist <= 0.0)
				{
					/* cannot convert: color is too blue */
					return -1;
				}
				if (i > 0 && thisVertDist <= 0.0)
					break;	/* found lines bounding (us, vs) : i-1 and i */
				prevVertDist = thisVertDist;
			}

			if (i == 31) {
				// cannot convert: color is too red
				return -1;
			} else {
				double thisPerpDist = thisVertDist / Math.sqrt(1.0 + t[i] * t[i]);
				double prevPerpDist = prevVertDist / Math.sqrt(1.0 + t[i-1] * t[i-1]);
				return (int)(1.0 / ((rt[i] - rt[i-1]) * (prevPerpDist / (prevPerpDist - thisPerpDist)) + rt[i-1]) + 0.5);
			}
		}
		
		public CIECoordinates toXY() {
			CIECoordinates result = new CIECoordinates(0, 0, this.y);

			double sum = this.x + this.y + this.z;
			if (sum > 0.0) {
				result.x = this.x / sum;
				result.y = this.y / sum;
			}

			return result;
		}
		
		public String toString() {
			return "X = " + this.x + ", Y = " + this.y + ", Z = " + this.z;
		}
	}

	public static class RGBColor {
		public double r;
		public double g;
		public double b;

		public RGBColor () {
			this.r = 0;
			this.g = 0;
			this.b = 0;
		}

		public RGBColor (double r, double g, double b) {
			this.r = r;
			this.g = g;
			this.b = b;
		}

		public CIEColor toXYZ() {
			return toXYZ(RGB_XYZ);
		}

		public CIEColor toXYZ(double[][] matrix) {
			double r = compand(this.r);
			double g = compand(this.g);
			double b = compand(this.b);
			return new CIEColor(
				r*matrix[0][0] + g*matrix[0][1] + b*matrix[0][2],
				r*matrix[1][0] + g*matrix[1][1] + b*matrix[1][2],
				r*matrix[2][0] + g*matrix[2][1] + b*matrix[2][2]
			);
		}

		private static double compand(double in) {
			double out;
			double sign = 1.0;
			if (gamma > 0.0) {
				out = Math.pow(Math.abs(in), gamma);
			} else {
				if (in < 0.0) {
					sign = -1.0;
					in = -in;
				}
				out = (in <= 0.08) ? (2700.0 * in / 24389.0) : ((((1000000.0 * in + 480000.0) * in + 76800.0) * in + 4096.0) / 1560896.0);
				out *= sign;
			}
			return out;
		}

		public String toString() {
			return "R = " + this.r + ", G = " + this.g + ", B = " + this.b;
		}
	}
}